如下是我用python3.8和django2.2写的项目。请帮我修改代码实现下列需求：
状态为审核中时，当前处理人可以进行审核通过或者审核不通过处理，审核通过任务状态变成已派发，审核不通过任务状态变成已退回
状态为已退回时，重新提交审核，状态变成审核中。
状态为已派发时，当前处理人可以点击答复任务，状态变成已完成。当前处理人进行任务转发，状态变成已转发。
状态为已转发时，当前处理人可以点击答复任务，状态变成已完成。当前处理人进行任务转发，状态还是已转发，并在数据库新插入一条记录，记录最新的状态，updated_at，target_user。
上面每次当前处理人更新时都在数据库中新插入一条记录，而不是在原记录上修改。
任务的状态只会是model里定义的如下五种状态，不需要approved这种状态：status_choices = [
        ('REVIEWING', '审核中'),
        ('REJECTED', '已退回'),
        ('ASSIGNED', '已派发'),
        ('FORWARDED', '已转发'),
        ('COMPLETED', '已完成'),
    ]



task项目目录结构：
E:\python\workspce\task:.
文件夹 PATH 列表
卷序列号为 FA6D-CAE2
E:.
|   9.21需求.txt
|   db.sqlite3
|   directory_structure.txt
|   directory_structure1.txt
|   manage.py
|   新文件 6.txt
|   
+---.idea
|   |   .gitignore
|   |   misc.xml
|   |   modules.xml
|   |   task.iml
|   |   workspace.xml
|   |   
|   \---inspectionProfiles
|           profiles_settings.xml
|           
+---mytask
|   |   admin.py
|   |   apps.py
|   |   forms.py
|   |   models.py
|   |   tests.py
|   |   views.py
|   |   __init__.py
|   |   
|   +---migrations
|   |   |   0001_initial.py
|   |   |   0002_assignment_alter_task_options_task_assignees_and_more.py
|   |   |   0003_auto_20240812_0046.py
|   |   |   0004_alter_task_options_remove_task_assignees_and_more.py
|   |   |   0005_task_deadline_task_is_overdue.py
|   |   |   0006_alter_task_creator_alter_task_handler_and_more.py
|   |   |   0007_remove_assignment_task_remove_assignment_user_and_more.py
|   |   |   0008_task_target_user.py
|   |   |   __init__.py
|   |   |   
|   |   \---__pycache__
|   |           0001_initial.cpython-311.pyc
|   |           0002_assignment_alter_task_options_task_assignees_and_more.cpython-311.pyc
|   |           0002_auto_20240811_2330.cpython-311.pyc
|   |           0003_auto_20240812_0046.cpython-311.pyc
|   |           0004_alter_task_options_remove_task_assignees_and_more.cpython-311.pyc
|   |           0005_task_deadline_task_is_overdue.cpython-311.pyc
|   |           0006_alter_task_creator_alter_task_handler_and_more.cpython-311.pyc
|   |           0007_remove_assignment_task_remove_assignment_user_and_more.cpython-311.pyc
|   |           0008_task_target_user.cpython-311.pyc
|   |           __init__.cpython-311.pyc
|   |           
|   \---__pycache__
|           admin.cpython-311.pyc
|           apps.cpython-311.pyc
|           forms.cpython-311.pyc
|           models.cpython-311.pyc
|           views.cpython-311.pyc
|           __init__.cpython-311.pyc
|           
+---static
|   \---vendors
|       +---css
|       |       bootstrap-grid.css
|       |       bootstrap-grid.css.map
|       |       bootstrap-grid.min.css
|       |       bootstrap-grid.min.css.map
|       |       bootstrap-grid.rtl.css
|       |       bootstrap-grid.rtl.css.map
|       |       bootstrap-grid.rtl.min.css
|       |       bootstrap-grid.rtl.min.css.map
|       |       bootstrap-reboot.css
|       |       bootstrap-reboot.css.map
|       |       bootstrap-reboot.min.css
|       |       bootstrap-reboot.min.css.map
|       |       bootstrap-reboot.rtl.css
|       |       bootstrap-reboot.rtl.css.map
|       |       bootstrap-reboot.rtl.min.css
|       |       bootstrap-reboot.rtl.min.css.map
|       |       bootstrap-utilities.css
|       |       bootstrap-utilities.css.map
|       |       bootstrap-utilities.min.css
|       |       bootstrap-utilities.min.css.map
|       |       bootstrap-utilities.rtl.css
|       |       bootstrap-utilities.rtl.css.map
|       |       bootstrap-utilities.rtl.min.css
|       |       bootstrap-utilities.rtl.min.css.map
|       |       bootstrap.css
|       |       bootstrap.css.map
|       |       bootstrap.min.css
|       |       bootstrap.min.css.map
|       |       bootstrap.rtl.css
|       |       bootstrap.rtl.css.map
|       |       bootstrap.rtl.min.css
|       |       bootstrap.rtl.min.css.map
|       |       custom.css
|       |       
|       \---js
|               bootstrap.bundle.js
|               bootstrap.bundle.js.map
|               bootstrap.bundle.min.js
|               bootstrap.bundle.min.js.map
|               bootstrap.esm.js
|               bootstrap.esm.js.map
|               bootstrap.esm.min.js
|               bootstrap.esm.min.js.map
|               bootstrap.js
|               bootstrap.js.map
|               bootstrap.min.js
|               bootstrap.min.js.map
|               jquery.min.js
|               popper.min.js
|               
+---staticfiles
|   +---admin
|   |   +---css
|   |   |   |   autocomplete.css
|   |   |   |   base.css
|   |   |   |   changelists.css
|   |   |   |   dark_mode.css
|   |   |   |   dashboard.css
|   |   |   |   fonts.css
|   |   |   |   forms.css
|   |   |   |   login.css
|   |   |   |   nav_sidebar.css
|   |   |   |   responsive.css
|   |   |   |   responsive_rtl.css
|   |   |   |   rtl.css
|   |   |   |   widgets.css
|   |   |   |   
|   |   |   \---vendor
|   |   |       \---select2
|   |   |               LICENSE-SELECT2.md
|   |   |               select2.css
|   |   |               select2.min.css
|   |   |               
|   |   +---fonts
|   |   |       LICENSE.txt
|   |   |       README.txt
|   |   |       Roboto-Bold-webfont.woff
|   |   |       Roboto-Light-webfont.woff
|   |   |       Roboto-Regular-webfont.woff
|   |   |       
|   |   +---img
|   |   |   |   calendar-icons.svg
|   |   |   |   icon-addlink.svg
|   |   |   |   icon-alert.svg
|   |   |   |   icon-calendar.svg
|   |   |   |   icon-changelink.svg
|   |   |   |   icon-clock.svg
|   |   |   |   icon-deletelink.svg
|   |   |   |   icon-no.svg
|   |   |   |   icon-unknown-alt.svg
|   |   |   |   icon-unknown.svg
|   |   |   |   icon-viewlink.svg
|   |   |   |   icon-yes.svg
|   |   |   |   inline-delete.svg
|   |   |   |   LICENSE
|   |   |   |   README.txt
|   |   |   |   search.svg
|   |   |   |   selector-icons.svg
|   |   |   |   sorting-icons.svg
|   |   |   |   tooltag-add.svg
|   |   |   |   tooltag-arrowright.svg
|   |   |   |   
|   |   |   \---gis
|   |   |           move_vertex_off.svg
|   |   |           move_vertex_on.svg
|   |   |           
|   |   \---js
|   |       |   actions.js
|   |       |   autocomplete.js
|   |       |   calendar.js
|   |       |   cancel.js
|   |       |   change_form.js
|   |       |   collapse.js
|   |       |   core.js
|   |       |   filters.js
|   |       |   inlines.js
|   |       |   jquery.init.js
|   |       |   nav_sidebar.js
|   |       |   popup_response.js
|   |       |   prepopulate.js
|   |       |   prepopulate_init.js
|   |       |   SelectBox.js
|   |       |   SelectFilter2.js
|   |       |   urlify.js
|   |       |   
|   |       +---admin
|   |       |       DateTimeShortcuts.js
|   |       |       RelatedObjectLookups.js
|   |       |       
|   |       \---vendor
|   |           +---jquery
|   |           |       jquery.js
|   |           |       jquery.min.js
|   |           |       LICENSE.txt
|   |           |       
|   |           +---select2
|   |           |   |   LICENSE.md
|   |           |   |   select2.full.js
|   |           |   |   select2.full.min.js
|   |           |   |   
|   |           |   \---i18n
|   |           |           af.js
|   |           |           ar.js
|   |           |           az.js
|   |           |           bg.js
|   |           |           bn.js
|   |           |           bs.js
|   |           |           ca.js
|   |           |           cs.js
|   |           |           da.js
|   |           |           de.js
|   |           |           dsb.js
|   |           |           el.js
|   |           |           en.js
|   |           |           es.js
|   |           |           et.js
|   |           |           eu.js
|   |           |           fa.js
|   |           |           fi.js
|   |           |           fr.js
|   |           |           gl.js
|   |           |           he.js
|   |           |           hi.js
|   |           |           hr.js
|   |           |           hsb.js
|   |           |           hu.js
|   |           |           hy.js
|   |           |           id.js
|   |           |           is.js
|   |           |           it.js
|   |           |           ja.js
|   |           |           ka.js
|   |           |           km.js
|   |           |           ko.js
|   |           |           lt.js
|   |           |           lv.js
|   |           |           mk.js
|   |           |           ms.js
|   |           |           nb.js
|   |           |           ne.js
|   |           |           nl.js
|   |           |           pl.js
|   |           |           ps.js
|   |           |           pt-BR.js
|   |           |           pt.js
|   |           |           ro.js
|   |           |           ru.js
|   |           |           sk.js
|   |           |           sl.js
|   |           |           sq.js
|   |           |           sr-Cyrl.js
|   |           |           sr.js
|   |           |           sv.js
|   |           |           th.js
|   |           |           tk.js
|   |           |           tr.js
|   |           |           uk.js
|   |           |           vi.js
|   |           |           zh-CN.js
|   |           |           zh-TW.js
|   |           |           
|   |           \---xregexp
|   |                   LICENSE.txt
|   |                   xregexp.js
|   |                   xregexp.min.js
|   |                   
|   \---vendors
|       +---css
|       |       bootstrap-grid.css
|       |       bootstrap-grid.css.map
|       |       bootstrap-grid.min.css
|       |       bootstrap-grid.min.css.map
|       |       bootstrap-grid.rtl.css
|       |       bootstrap-grid.rtl.css.map
|       |       bootstrap-grid.rtl.min.css
|       |       bootstrap-grid.rtl.min.css.map
|       |       bootstrap-reboot.css
|       |       bootstrap-reboot.css.map
|       |       bootstrap-reboot.min.css
|       |       bootstrap-reboot.min.css.map
|       |       bootstrap-reboot.rtl.css
|       |       bootstrap-reboot.rtl.css.map
|       |       bootstrap-reboot.rtl.min.css
|       |       bootstrap-reboot.rtl.min.css.map
|       |       bootstrap-utilities.css
|       |       bootstrap-utilities.css.map
|       |       bootstrap-utilities.min.css
|       |       bootstrap-utilities.min.css.map
|       |       bootstrap-utilities.rtl.css
|       |       bootstrap-utilities.rtl.css.map
|       |       bootstrap-utilities.rtl.min.css
|       |       bootstrap-utilities.rtl.min.css.map
|       |       bootstrap.css
|       |       bootstrap.css.map
|       |       bootstrap.min.css
|       |       bootstrap.min.css.map
|       |       bootstrap.rtl.css
|       |       bootstrap.rtl.css.map
|       |       bootstrap.rtl.min.css
|       |       bootstrap.rtl.min.css.map
|       |       custom.css
|       |       
|       \---js
|               bootstrap.bundle.js
|               bootstrap.bundle.js.map
|               bootstrap.bundle.min.js
|               bootstrap.bundle.min.js.map
|               bootstrap.esm.js
|               bootstrap.esm.js.map
|               bootstrap.esm.min.js
|               bootstrap.esm.min.js.map
|               bootstrap.js
|               bootstrap.js.map
|               bootstrap.min.js
|               bootstrap.min.js.map
|               jquery.min.js
|               popper.min.js
|               
+---task
|   |   settings.py
|   |   urls.py
|   |   wsgi.py
|   |   __init__.py
|   |   
|   \---__pycache__
|           settings.cpython-311.pyc
|           settings.cpython-38.pyc
|           urls.cpython-311.pyc
|           urls.cpython-38.pyc
|           wsgi.cpython-311.pyc
|           wsgi.cpython-38.pyc
|           __init__.cpython-311.pyc
|           __init__.cpython-38.pyc
|           
+---task_attachments
|       06-南通市.xls
|       06-南通市11.xls
|       06-南通市11_eI82ch0.xls
|       06-南通市_hDukY9o.xls
|       06-南通市_QBgGG1H.xls
|       06-南通市_sZcjdBO.xls
|       06-南通市_tigKBKj.xls
|       06-南通市_UoA0vol.xls
|       06-南通市_uoQMunB.xls
|       06-南通市_Xryhner.xls
|       12880693_202308051319035587.csv
|       2023年2-4季度网点个金计价明细表7.31.xls
|       5南通分行宣讲PPT.pptx
|       南通公务员.xlsx
|       小一家长.xls
|       
\---templates
    |   base.html
    |   
    \---task
            create_task.html
            home.html
            login.html
            manage_reviewers.html
            register.html
            task_list.html
            view_task.html
            

            

项目配置及代码：
forms.py：
from django import forms
from django.contrib.auth import authenticate
from django.contrib.auth.forms import AuthenticationForm
from django.contrib.auth.forms import UserCreationForm
from django.contrib.auth.models import User
from .models import Task


class LoginForm(AuthenticationForm):
    username = forms.CharField(label="Username", max_length=254,
                               widget=forms.TextInput(attrs={'autofocus': True}))
    password = forms.CharField(label="Password", strip=False,
                               widget=forms.PasswordInput)

    def clean(self):
        username = self.cleaned_data.get('username')
        password = self.cleaned_data.get('password')

        if username is not None and password:
            self.user_cache = authenticate(self.request, username=username, password=password)
            if self.user_cache is None:
                raise forms.ValidationError(
                    self.error_messages['invalid_login'],
                    code='invalid_login',
                    params={'username': self.username_field.verbose_name},
                )
            else:
                self.confirm_login_allowed(self.user_cache)

        return self.cleaned_data


class RegisterForm(UserCreationForm):
    email = forms.EmailField(required=True)

    class Meta:
        model = User
        fields = ("username", "email", "password1", "password2")

    def save(self, commit=True):
        user = super(RegisterForm, self).save(commit=False)
        user.email = self.cleaned_data['email']
        if commit:
            user.save()
        return user


# 新建任务表单
class TaskForm(forms.ModelForm):
    deadline = forms.DateTimeField(required=True, input_formats=['%Y-%m-%dT%H:%M'])  # 添加 deadline 字段

    class Meta:
        model = Task
        fields = ['title', 'content', 'attachment', 'deadline']  # 添加 deadline 到 fields 中
        labels = {
            'title': '任务标题',
            'content': '任务具体内容',
            'attachment': '附件',
            'deadline': '截至日期',
        }
        widgets = {
            'title': forms.TextInput(attrs={'class': 'form-control'}),
            'content': forms.Textarea(attrs={'class': 'form-control'}),
            'attachment': forms.ClearableFileInput(attrs={'class': 'form-control-file'}),
            'deadline': forms.DateTimeInput(  # 使用 DateTimeInput 替换原来的 Textarea
                attrs={'class': 'form-control', 'type': 'datetime-local'}
            ),
        }


models.py：
from django.db import models
import string
import random
from django.contrib.auth.models import User
import uuid
from django.utils import timezone


def generate_unique_task_id():
    # 生成一个唯一且未使用的任务编号
    models_imported = False
    while True:
        # 使用 UUID 生成唯一编号，前缀为 "T-"
        task_id = "T-" + str(uuid.uuid4()).replace('-', '')[:6]

        if not Task.objects.filter(task_id=task_id).exists():
            return task_id


class Task(models.Model):
    task_id = models.CharField(max_length=10, unique=True, default=generate_unique_task_id)
    title = models.CharField(max_length=200)
    content = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    attachment = models.FileField(upload_to='task_attachments/', blank=True, null=True)
    creator = models.CharField(max_length=150, blank=True, null=True)
    reviewer = models.CharField(max_length=150, blank=True, null=True)
    handler = models.CharField(max_length=150, blank=True, null=True)
    target_user = models.CharField(max_length=150, blank=True, null=True)
    status_choices = [
        ('REVIEWING', '审核中'),
        ('REJECTED', '已退回'),
        ('ASSIGNED', '已派发'),
        ('FORWARDED', '已转发'),
        ('COMPLETED', '已完成'),
    ]
    status = models.CharField(max_length=15, choices=status_choices, default='REVIEWING')
    # 添加任务截止时间字段
    deadline = models.DateTimeField(null=True, blank=True, help_text="任务的截止日期和时间")
    # 添加是否超时字段
    is_overdue = models.BooleanField(default=False)
    # 新增审核意见字段
    review_comment = models.TextField(blank=True, null=True)
    # 新增备用字段
    backup_field1 = models.CharField(max_length=100, blank=True, null=True)
    backup_field2 = models.CharField(max_length=100, blank=True, null=True)
    backup_field3 = models.CharField(max_length=100, blank=True, null=True)
    backup_field4 = models.CharField(max_length=100, blank=True, null=True)
    backup_field5 = models.CharField(max_length=100, blank=True, null=True)
    backup_field6 = models.CharField(max_length=100, blank=True, null=True)
    # 新增任务执行情况字段
    task_execution_status = models.TextField(blank=True, null=True)
    # 新增答复附件字段
    reply_attachment = models.FileField(upload_to='task_attachments/', blank=True, null=True)

    def save(self, *args, **kwargs):
        # 如果任务有截止时间并且当前时间超过截止时间，则设置为超时
        if self.deadline and self.deadline < timezone.now():
            self.is_overdue = True
        # 更新 handler 字段
        if self.status == 'REVIEWING':
            self.handler = self.reviewer
        elif self.status == 'REJECTED':
            self.handler = self.creator
        elif self.status == 'ASSIGNED':
            self.handler = self.target_user
        elif self.status == 'FORWARDED':
            self.handler = self.target_user
        elif self.status == 'COMPLETED':
            self.handler = self.creator
        super().save(*args, **kwargs)

    def __str__(self):
        return f"{self.title} ({self.task_id})"

    class Meta:
        verbose_name = '任务'
        verbose_name_plural = '任务'
        ordering = ['-created_at']


class Assignment(models.Model):
    task_id = models.CharField(max_length=10, db_index=True, default=generate_unique_task_id)
    username = models.CharField(max_length=150, null=True, blank=True)
    completed = models.BooleanField(default=False)

    def __str__(self):
        return f"{self.username} - {self.task_id}"


class Reviewer(models.Model):
    username = models.CharField(max_length=150, null=True, blank=True)

    def __str__(self):
        return f"{self.username} - 审核员"





views.py：
# myapp/views.py
from django.contrib.auth import login, authenticate, logout
from django.shortcuts import render, redirect, get_object_or_404
from .forms import LoginForm, RegisterForm, TaskForm
from .models import Task, Assignment, Reviewer
from django.contrib.auth.decorators import login_required
from django.http import HttpResponseForbidden
from django.contrib import messages
from django.core.exceptions import PermissionDenied
from django.contrib.auth.models import User
from django.utils import timezone
from datetime import datetime
from django.db.models import Q

def user_login(request):
    if request.method == 'POST':
        form = LoginForm(data=request.POST)
        if form.is_valid():
            username = form.cleaned_data.get('username')
            password = form.cleaned_data.get('password')
            user = authenticate(username=username, password=password)
            if user is not None:
                login(request, user)
                return redirect('home')  # 重定向到首页或其他页面
    else:
        form = LoginForm()
    return render(request, 'task/login.html', {'form': form})


def user_register(request):
    if request.method == 'POST':
        form = RegisterForm(request.POST)
        if form.is_valid():
            user = form.save()
            login(request, user)  # 自动登录新注册的用户
            return redirect('home')  # 重定向到首页或其他页面
    else:
        form = RegisterForm()
    return render(request, 'task/register.html', {'form': form})


def logout_view(request):
    logout(request)
    return redirect('login')  # 重定向到登录页

def custom_login_required(view_func):
    def wrapper(request, *args, **kwargs):
        if request.user.is_authenticated:  # 假设您使用的是 Django 的用户模型
            return view_func(request, *args, **kwargs)
        else:
            # 重定向到登录页面
            return redirect('login')
    return wrapper

@custom_login_required
def home(request):
    can_manage_reviewers = request.user.has_perm('mytask.can_manage_reviewers')
    context = {
        'can_manage_reviewers': can_manage_reviewers,
    }
    return render(request, 'task/home.html', context)


def new_task(request):
    return render(request, 'task/create_task.html')


def review_tasks(request):
    return render(request, 'task/home.html')

@custom_login_required
def create_task(request):
    if request.method == 'POST':
        form = TaskForm(request.POST, request.FILES)
        if form.is_valid():
            task = form.save(commit=False)
            task.creator = request.user.username
            task.status = 'REVIEWING'
            try:
                task.save()
            except Exception as e:
                messages.error(request, f'创建任务时发生错误: {e}')
                return redirect('create_task')

            # 获取派发目标用户
            target_user = request.POST.get('target_user')
            if target_user:
                Assignment.objects.create(task_id=task.task_id, username=target_user)

            # 获取审核人
            reviewer = request.POST.get('reviewer')
            if reviewer:
                task.reviewer = reviewer
                task.save()

            messages.success(request, '任务已创建！')
            return redirect('task_list')
    else:
        form = TaskForm()

    # 获取所有用户和审核人
    users = User.objects.exclude(pk=request.user.pk).values_list('username', flat=True)
    reviewers = Reviewer.objects.all().values_list('username', flat=True)

    return render(request, 'task/create_task.html', {'form': form, 'users': users, 'reviewers': reviewers})
@custom_login_required
def task_list(request):
    # 初始获取任务列表
    tasks = Task.objects.all()
    query = request.GET.get('query', '')
    start_date = request.GET.get('start_date', '')
    end_date = request.GET.get('end_date', '')
    status = request.GET.get('status', '')

    # 检查是否有清空条件的请求
    if request.GET.get('clear_filters'):
        query = ''
        start_date = ''
        end_date = ''
        status = ''

    try:
        if query:
            tasks = tasks.filter(Q(title__icontains=query) | Q(task_id__icontains=query))

        if start_date and end_date:
            start_date = datetime.strptime(start_date, '%Y-%m-%d')
            end_date = datetime.strptime(end_date, '%Y-%m-%d')
            tasks = tasks.filter(created_at__range=(start_date, end_date))

        if status and status!= '':
            tasks = tasks.filter(status=status)
        else:
            print("Received empty or default status value.")
    except Exception as e:
        # 记录可能出现的错误
        print(f"An error occurred during filtering: {e}")

    task_data = []
    for task in tasks:
        task_data.append({
            'task_id': task.task_id,
            'title': task.title,
            'created_at': task.created_at,
            'status': task.get_status_display(),
            'handler': task.handler
        })

    return render(request, 'task/task_list.html', {'tasks': task_data, 'query': query, 'start_date': start_date, 'end_date': end_date,'status': status})





# myapp/views.py
from django.conf import settings

# myapp/views.py
from django.conf import settings


@custom_login_required
def view_task(request, task_id):
    # 获取任务对象
    task = get_object_or_404(Task, task_id=task_id)

    # 获取当前用户的分配记录
    assignment = Assignment.objects.filter(task_id=task_id, username=request.user.username).first()

    # 获取所有用户（假设您需要所有用户作为选项）
    users = User.objects.all()  # 或者根据需要筛选用户列表

    # 检查用户是否有权限进行审核
    can_approve_tasks = request.user.has_perm('mytask.can_approve_tasks')

    # 获取最新的任务记录
    latest_task = Task.objects.filter(task_id=task_id).order_by('-updated_at').first()

    if request.method == 'POST':
        if task.status == 'REVIEWING':
            approval_status = request.POST.get('approval_status')
            review_comment = request.POST.get('review_comment')
            if approval_status:
                task.status = 'APPROVED' if approval_status == 'approved' else 'REJECTED'
                task.review_comment = review_comment
                task.save()
                # 创建新的任务记录
                new_task = Task.objects.create(
                    task_id=task.task_id,
                    title=task.title,
                    content=task.content,
                    attachment=task.attachment,
                    creator=task.creator,
                    reviewer=task.reviewer,
                    handler=task.handler,
                    target_user=task.target_user,
                    status=task.status,
                    deadline=task.deadline,
                    is_overdue=task.is_overdue,
                    review_comment=review_comment,
                    backup_field1=task.backup_field1,
                    backup_field2=task.backup_field2,
                    backup_field3=task.backup_field3,
                    backup_field4=task.backup_field4,
                    backup_field5=task.backup_field5,
                    backup_field6=task.backup_field6,
                    task_execution_status=task.task_execution_status,
                    reply_attachment=task.reply_attachment
                )
                return redirect('task_list')
        elif task.status == 'REJECTED':
            title = request.POST.get('title')
            content = request.POST.get('content')
            attachment = request.FILES.get('attachment')
            target_user = request.POST.get('target_user')
            reviewer = request.POST.get('reviewer')
            task.title = title
            task.content = content
            if attachment:
                task.attachment = attachment
            task.target_user = target_user
            task.reviewer = reviewer
            task.status = 'REVIEWING'
            task.save()
            # 创建新的任务记录
            new_task = Task.objects.create(
                task_id=task.task_id,
                title=task.title,
                content=task.content,
                attachment=task.attachment,
                creator=task.creator,
                reviewer=task.reviewer,
                handler=task.handler,
                target_user=task.target_user,
                status=task.status,
                deadline=task.deadline,
                is_overdue=task.is_overdue,
                review_comment=task.review_comment,
                backup_field1=task.backup_field1,
                backup_field2=task.backup_field2,
                backup_field3=task.backup_field3,
                backup_field4=task.backup_field4,
                backup_field5=task.backup_field5,
                backup_field6=task.backup_field6,
                task_execution_status=task.task_execution_status,
                reply_attachment=task.reply_attachment
            )
            return redirect('task_list')
        elif task.status == 'ASSIGNED' or task.status == 'FORWARDED':
            if 'reply_task' in request.POST:
                task_execution_status = request.POST.get('task_execution_status')
                reply_attachment = request.FILES.get('reply_attachment')
                task.task_execution_status = task_execution_status
                if reply_attachment:
                    task.reply_attachment = reply_attachment
                task.save()
                # 创建新的任务记录
                new_task = Task.objects.create(
                    task_id=task.task_id,
                    title=task.title,
                    content=task.content,
                    attachment=task.attachment,
                    creator=task.creator,
                    reviewer=task.reviewer,
                    handler=task.handler,
                    target_user=task.target_user,
                    status=task.status,
                    deadline=task.deadline,
                    is_overdue=task.is_overdue,
                    review_comment=task.review_comment,
                    backup_field1=task.backup_field1,
                    backup_field2=task.backup_field2,
                    backup_field3=task.backup_field3,
                    backup_field4=task.backup_field4,
                    backup_field5=task.backup_field5,
                    backup_field6=task.backup_field6,
                    task_execution_status=task_execution_status,
                    reply_attachment=reply_attachment
                )
                return redirect('task_list')
            elif 'forward_task' in request.POST:
                new_target_user = request.POST.get('new_target_user')
                task.target_user = new_target_user
                task.status = 'FORWARDED' if task.status == 'ASSIGNED' else 'FORWARDED'
                task.save()
                # 创建新的任务记录
                new_task = Task.objects.create(
                    task_id=task.task_id,
                    title=task.title,
                    content=task.content,
                    attachment=task.attachment,
                    creator=task.creator,
                    reviewer=task.reviewer,
                    handler=task.handler,
                    target_user=new_target_user,
                    status=task.status,
                    deadline=task.deadline,
                    is_overdue=task.is_overdue,
                    review_comment=task.review_comment,
                    backup_field1=task.backup_field1,
                    backup_field2=task.backup_field2,
                    backup_field3=task.backup_field3,
                    backup_field4=task.backup_field4,
                    backup_field5=task.backup_field5,
                    backup_field6=task.backup_field6,
                    task_execution_status=task.task_execution_status,
                    reply_attachment=task.reply_attachment
                )
                return redirect('task_list')

    return render(request, 'task/view_task.html', {
        'task': latest_task,
        'users': users,
        'assignment': assignment,
        'can_approve_tasks': can_approve_tasks
    })





@custom_login_required
def manage_reviewers(request):
    if not request.user.has_perm('mytask.can_manage_reviewers'):
        raise PermissionDenied

    reviewers = Reviewer.objects.all()
    if request.method == 'POST':
        selected_users = request.POST.getlist('selected_users')
        Reviewer.objects.exclude(user__id__in=selected_users).delete()
        for user_id in selected_users:
            user = User.objects.get(id=user_id)
            Reviewer.objects.get_or_create(user=user)
        messages.success(request, '审核员列表已更新。')
        return redirect('manage_reviewers')

    all_users = User.objects.all()
    return render(request, 'mytask/manage_reviewers.html', {'reviewers': reviewers, 'all_users': all_users})



	
settings.py：
"""
Django settings for task project.

Generated by 'django-admin startproject' using Django 2.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
from pathlib import Path
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
#BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
from django.conf import settings

BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '*#l_hyn5r5s6^%_f8-9tu+0d+-dgb5_g@%35mncpuq#$h^yi4%'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'mytask',
    'bootstrap4'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'task.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates'), ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'task.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# Add Bootstrap static files

STATIC_ROOT = BASE_DIR / "staticfiles"

urls.py：
"""task URL Configuration

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/2.2/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path
from django.conf import settings
from django.conf.urls.static import static

from mytask import views
from mytask.views import user_login, user_register, home
from django.contrib.auth.views import LogoutView

urlpatterns = [
    path('admin/', admin.site.urls),
    path('login/', user_login, name='login'),
    path('register/', user_register, name='register'),
    path('logout/', views.logout_view, name='logout'),
    path('', home, name='home'),  # 添加主页 URL
    path('new-task/', views.new_task, name='new_task'),  # 注意这里的名称
    path('task-list/', views.task_list, name='task_list'),
    path('review-tasks/', views.review_tasks, name='review_tasks'),
    path('create/', views.create_task, name='create_task'),
    path('view-task/', views.view_task, name='view_task'),
    path('view-task/<str:task_id>/', views.view_task, name='view_task'),
#   path('view-task/<str:task_id>/', views.view_task, name='view_task'),
    path('manage-reviewers/', views.manage_reviewers, name='manage_reviewers'),
]+ static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

if settings.DEBUG:
    urlpatterns += static(settings.STATIC_URL, document_root=settings.STATICFILES_DIRS[0])

# Serve media files in development
urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)


<!-- templates/task/create_task.html -->
{% extends 'base.html' %}
{% block title %}创建任务{% endblock %}
{% block content %}
<div class="container mt-5">
    <h1 class="text-center">创建任务</h1>
    <form method="post" enctype="multipart/form-data" action="{% url 'create_task' %}" class="needs-validation" novalidate>
        {% csrf_token %}
        <div class="row" style="width: 50%; margin: 0 auto;">
            <div class="col-md-6 mb-3">
                <label for="id_title" class="form-label">任务标题:</label>
                <input type="text" class="form-control shadow-sm" id="id_title" name="title" placeholder="请输入任务标题" value="{{ form.title.value|default:'' }}" required>
                <div class="invalid-feedback">
                    请填写任务标题。
                </div>
            </div>
        </div>
        <div class="row" style="width: 50%; margin: 0 auto;">
            <div class="col-md-6 mb-3">
                <label for="id_deadline" class="form-label">截至日期:</label>
                <input type="datetime-local" class="form-control shadow-sm" id="id_deadline" name="deadline" value="{{ form.deadline.value|date:'Y-m-d\TH:i' }}" required>
                <div class="invalid-feedback">
                    请选择截至日期。
                </div>
            </div>
        </div>
        <div class="row" style="width: 50%; margin: 0 auto;">
            <div class="col-md-12 mb-3">
                <label for="id_content" class="form-label">任务具体内容:</label>
                <textarea class="form-control shadow-sm" id="id_content" name="content" rows="3" placeholder="请输入任务具体内容" style="margin-top: 1.25rem; margin-bottom: 1.25rem;">{{ form.content.value|default:'' }}</textarea>
            </div>
        </div>
        <div class="row" style="width: 50%; margin: 0 auto;">
            <div class="col-md-6 mb-3">
                <label for="id_attachment" class="form-label">附件:</label>
                <input type="file" class="form-control-file shadow-sm" id="id_attachment" name="attachment">
            </div>
        </div>
        <div class="row" style="width: 50%; margin: 0 auto;">
            <div class="col-md-6 mb-3">
                <label for="target_user" class="form-label">派发目标用户:</label>
                <select name="target_user" id="target_user" class="form-select shadow-sm">
                    {% for user in users %}
                    <option value="{{ user }}">{{ user }}</option>
                    {% endfor %}
                </select>
            </div>
        </div>
        <div class="row" style="width: 50%; margin: 0 auto;">
            <div class="col-md-6 mb-3">
                <label for="reviewer" class="form-label">审核人:</label>
                <select name="reviewer" id="reviewer" class="form-select shadow-sm">
                    {% for reviewer in reviewers %}
                    <option value="{{ reviewer }}">{{ reviewer }}</option>
                    {% endfor %}
                </select>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12 text-center">
                <button type="submit" class="btn btn-primary shadow-sm" style="padding: 0.75rem 2rem;">创建任务</button>
            </div>
        </div>
    </form>
</div>
{% endblock %}

<!-- templates/task/home.html -->
{% extends 'base.html' %}
{% block title %}首页{% endblock %}
{% block content %}
<div class="container mt-5">
<h1>欢迎来到任务管理系统</h1>
<div class="row">
<div class="col-md-4">
<div class="card mb-3">
<div class="card-body">
<h5 class="card-title">新建任务</h5>
<p class="card-text">创建新任务。</p>
{% if user.is_authenticated %}
<a href="{% url 'create_task' %}" class="btn btn-primary">创建任务</a>
{% endif %}
</div>
</div>
</div>
<div class="col-md-4">
<div class="card mb-3">
<div class="card-body">
<h5 class="card-title">查看任务</h5>
<p class="card-text">查看所有任务。</p>
{% if user.is_authenticated %}
<a href="{% url 'task_list' %}" class="btn btn-primary">查看任务</a>
{% endif %}
</div>
</div>
</div>
<div class="col-md-4">
<div class="card mb-3">
<div class="card-body">
<h5 class="card-title">待办任务</h5>
<p class="card-text">待处理的所有任务。</p>
{% if user.is_authenticated %}
<a href="{% url 'review_tasks' %}" class="btn btn-primary">待办任务</a>
{% endif %}
</div>
</div>
</div>
</div>
</div>
{% endblock %}

<!-- templates/task/login.html -->
{% extends 'base.html' %}

{% block content %}
<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">Login</div>
                <div class="card-body">
                    <form method="post">
                        {% csrf_token %}
                        <div class="mb-3">
                            <label for="username" class="form-label">Username</label>
                            <input type="text" class="form-control" id="username" name="username">
                        </div>
                        <div class="mb-3">
                            <label for="password" class="form-label">Password</label>
                            <input type="password" class="form-control" id="password" name="password">
                        </div>
                        <button type="submit" class="btn btn-primary">Login</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}


<!-- templates/task/manage_reviewers.html -->
{% extends 'base.html' %}

{% block title %}管理审核员{% endblock %}

{% block content %}
    <div class="container mt-5">
        <h1>管理审核员</h1>
        <form method="post">
            {% csrf_token %}
            <table class="table">
                <thead>
                    <tr>
                        <th scope="col"></th>
                        <th scope="col">用户名</th>
                    </tr>
                </thead>
                <tbody>
                    {% for user in all_users %}
                        <tr>
                            <td><input type="checkbox" name="selected_users" value="{{ user.id }}" {% if user.reviewer %}checked{% endif %}></td>
                            <td>{{ user.username }}</td>
                        </tr>
                    {% endfor %}
                </tbody>
            </table>
            <button type="submit" class="btn btn-primary">更新审核员列表</button>
        </form>
    </div>
{% endblock %}


<!-- templates/task/register.html -->
{% extends 'base.html' %}

{% block title %}Register{% endblock %}

{% block content %}
<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">Register</div>
                <div class="card-body">
                    <form method="post">
                        {% csrf_token %}
                        <div class="mb-3">
                            <label for="username" class="form-label">Username</label>
                            <input type="text" class="form-control" id="username" name="username">
                        </div>
                        <div class="mb-3">
                            <label for="email" class="form-label">Email</label>
                            <input type="email" class="form-control" id="email" name="email">
                        </div>
                        <div class="mb-3">
                            <label for="password1" class="form-label">Password</label>
                            <input type="password" class="form-control" id="password1" name="password1">
                        </div>
                        <div class="mb-3">
                            <label for="password2" class="form-label">Confirm Password</label>
                            <input type="password" class="form-control" id="password2" name="password2">
                        </div>
                        <button type="submit" class="btn btn-primary">Register</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}


<!-- templates/task/task_list.html -->
{% extends 'base.html' %}

{% block title %}任务列表{% endblock %}

{% block content %}
    <div class="container mt-5">
        <h2>任务查询与筛选</h2>
        <form method="get" id="task-list-form">
            <div class="row">
                <div class="col-md-3">
                    <label for="query">查询：</label>
                    <input type="text" id="query" name="query" placeholder="根据标题或编号查询" value="{{ query }}">
                </div>
                <div class="col-md-3 date-filter-group">
                    <label for="start_date">创建日期范围：</label>
                    <input type="date" id="start_date" name="start_date" value="{% if start_date %}{{ start_date|date:'Y - m - d' }}{% else %}{% endif %}">
                    -
                    <input type="date" id="end_date" name="end_date" value="{% if end_date %}{{ end_date|date:'Y - m - d' }}{% else %}{% endif %}">
                </div>
                <div class="col-md-3">
                    <label for="status">状态筛选：</label>
                    <select name="status" id="status">
                        <option value="">所有状态</option>
                        <option value="REVIEWING">审核中</option>
                        <option value="REJECTED">已退回</option>
                        <option value="ASSIGNED">已派发</option>
                        <option value="FORWARDED">已转发</option>
                        <option value="COMPLETED">已完成</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <button type="currency="$ ">查询筛选</button>
                    <button type="button" class="btn btn-secondary" onclick="clearFilters()">清空</button>
                    <input type="hidden" name="clear_filters" value="">
                </div>
            </div>
        </form>
        <div id="content">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th scope="col">任务编号</th>
                        <th scope="col">标题</th>
                        <th scope="col">创建时间</th>
                        <th scope="col">状态</th>
                        <th scope="col">当前处理人</th>
                        <th scope="col">操作</th>
                </tr>
                </thead>
                <tbody>
                    {% for task in tasks %}
                    <tr>
                        <td>
                            <a href="{% url 'view_task' task_id=task.task_id %}">{{ task.task_id }}</a>
                        </td>
                        <td>{{ task.title }}</td>
                        <td>{{ task.created_at|date:"Y - m - d H:i" }}</td>
                        <th scope="col">{{ task.status }}</th>
                        <td>{{ task.handler }}</td>
                        <td>
                            <a href="{% url 'view_task' task_id=task.task_id %}" class="btn btn-sm btn-primary">查看</a>
                        </td>
                    </tr>
                    {% empty %}
                    <tr>
                        <td colspan="6" class="text-center">暂无任务</td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
    </div>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const statusSelect = document.getElementById('status');
            let selectedStatus = '';
            statusSelect.addEventListener('change', function (event) {
                event.preventDefault();
                selectedStatus = this.value;
            });
            const form = document.getElementById('task-list-form');
            form.addEventListener('curlines=" ">submit", function (event) {
                event.preventDefault();
                const queryValue = document.getElementById('query').value;
                const startDateValue = document.getElementById('start_date').value;
                const endDateValue = document.getElementById('end_date').value;
                let url = form.action + '?';
                if (queryValue) {
                    url += `query=${encodeURIComponent(queryValue)}&`;
                }
                if (startDateValue) {
                    url += `start_date=${encodeURIComponent(startDateValue)}&`;
                }
                if (endDateValue) {
                    url += `end_date=${encodeURIComponent(endDateValue)}&`;
                }
                if (selectedStatus) {
                    url += `status=${encodeURIComponent(selectedStatus)}&`;
                }
                // 移除最后一个&符号
                url = url.slice(0, -1);
                fetch(url, {
                    method: 'GET'
                }).then(response => response.text()).then(html => {
                    const parser = new DOMParser();
                    const doc = parser.parseFromString(html, 'text/html');
                    const contentDiv = document.getElementById('content');
                    contentDiv.innerHTML = doc.getElementById('content').innerHTML;
                });
            });
        });

        function clearFilters() {
            document.getElementById('query').value = '';
            document.getElementById('start_date').value = '';
            document.getElementById('end_date') = '';
            document.getElementById('status').value = '';
            document.getElementById('task-list-form').submit();
            // 清空隐藏字段的值，确保提交时触发清空条件逻辑
            document.getElementById('clear_filters').value = '1';
        }
    </script>
{% endblock %}



<!-- templates/task/view_task.html -->
{% extends 'base.html' %}

{% block title %}任务详情 - {{ task.title }}{% endblock %}

{% block content %}
    <div class="container mt-5">
        <h1>任务详情 - {{ task.title }}</h1>
        <dl class="row">
            <dt class="col-sm-3">任务编号:</dt>
            <dd class="col-sm-9">{{ task.task_id }}</dd>
            <dt class="col-sm-3">创建时间:</dt>
            <dd class="col-sm-9">{{ task.created_at|date:"Y-m-d H:i" }}</dd>
            <dt class="col-sm-3">具体内容:</dt>
            <dd class="col-sm-9">{{ task.content }}</dd>
            {% if task.attachment %}
                <dt class="col-sm-3">附件:</dt>
                <dd class="col-sm-9">
                    <a href="{{ task.attachment.url }}" target="_blank">{{ task.attachment.name|truncatechars:20 }}</a>
                </dd>
            {% endif %}
            <dt class="col-sm-3">状态:</dt>
            <dd class="col-sm-9">{{ task.get_status_display }}</dd>
            <dt class="col-sm-3">当前处理人:</dt>
            <dd class="col-sm-9">
                {% if task.handler %}
                    {{ task.handler }}
                {% else %}
                    暂无处理人
                {% endif %}
            </dd>
        </dl>
        {% if request.user.username == task.handler %}
            {% if task.status == 'REVIEWING' %}
                <form method="post">
                    {% csrf_token %}
                    <div class="form-group">
                        <label for="approval_status">审核结果：</label>
                        <select id="approval_status" name="approval_status">
                            <option value="approved">审核通过</option>
                            <option value="rejected">审核不通过</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="review_comment">审核意见：</label>
                        <textarea id="review_comment" name="review_comment" rows="3"></textarea>
                    </div>
                    <button type="submit" class="btn btn-primary">提交审核结果</button>
                </form>
            {% elif task.status == 'REJECTED' %}
                <form method="post" enctype="multipart/form-data">
                    {% csrf_token %}
                    <div class="form-group">
                        <label for="title">任务标题：</label>
                        <input type="text" id="title" name="title" value="{{ task.title }}" required>
                    </div>
                    <div class="form-group">
                        <label for="content">任务内容：</label>
                        <textarea id="content" name="content" rows="3">{{ task.content }}</textarea>
                    </div>
                    <div class="form-group">
                        <label for="attachment">附件：</label>
                        <input type="file" id="attachment" name="attachment">
                    </div>
                    <div class="form-group">
                        <label for="target_user">目标用户：</label>
                        <select id="target_user" name="target_user">
                            {% for user in users %}
                                <option value="{{ user.username }}" {% if user.username == task.target_user %}selected{% endif %}>{{ user.username }}</option>
                            {% endfor %}
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="reviewer">审核人：</label>
                        <select id="reviewer" name="reviewer">
                            {% for reviewer in reviewers %}
                                <option value="{{ reviewer.username }}" {% if reviewer.username == task.reviewer %}selected{% endif %}>{{ reviewer.username }}</option>
                            {% endfor %}
                        </select>
                    </div>
                    <button type="submit" class="btn btn-primary">重新提交审核</button>
                </form>
            {% elif task.status == 'ASSIGNED' or task.status == 'FORWARDED' %}
                <form method="post" enctype="multipart/form-data">
                    {% csrf_token %}
                    <div class="form-group">
                        <label for="task_execution_status">任务执行情况：</label>
                        <textarea id="task_execution_status" name="task_execution_status" rows="3"></textarea>
                    </div>
                    <div class="form-group">
                        <label for="reply_attachment">答复附件：</label>
                        <input type="file" id="reply_attachment" name="reply_attachment">
                    </div>
                    <button type="submit" name="reply_task" class="btn btn-primary">答复任务</button>
                    <div class="form-group">
                        <label for="new_target_user">新的派发目标用户：</label>
                        <select id="new_target_user" name="new_target_user">
                            {% for user in users %}
                                <option value="{{ user.username }}">{{ user.username }}</option>
                            {% endfor %}
                        </select>
                    </div>
                    <button type="submit" name="forward_task" class="btn btn-primary">转发任务</button>
                </form>
            {% endif %}
        {% elif task.status == 'COMPLETED' %}
            <p>任务答复内容：{{ task.task_execution_status }}</p>
            {% if task.reply_attachment %}
                <p>
                    <a href="{{ task.reply_attachment.url }}" target="_blank">下载目标任务答复的附件</a>
                </p>
            {% endif %}
        {% endif %}
    </div>
{% endblock %}



<!-- templates/task/base.html -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}{% endblock %}</title>
    {% load static %}
    <link rel="stylesheet" href="{% static 'vendors/css/bootstrap.min.css' %}">
    <link rel="stylesheet" href="{% static 'vendors/css/custom.css' %}">
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <div class="container-fluid">
            <a class="navbar-brand" href="#">任务管理系统</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav">
                    <li class="nav-item">
                        <a class="nav-link" href="{% url 'home' %}">首页</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="{% url 'task_list' %}">任务列表</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="{% url 'create_task' %}">创建任务</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="{% url 'logout' %}">注销</a>
                    </li>
                </ul>
            </div>
            <!-- 添加欢迎信息 -->
            <div class="navbar-text ml-auto">
                <span class="navbar-text">欢迎，{{ user.username }}!</span>
            </div>
        </div>
    </nav>
    <main role="main" class="container">
        {% block content %}
        <!-- Content will be injected here by child templates -->
        {% endblock %}
    </main>
    <!-- Bootstrap JS -->
    <script src="{% static 'vendors/js/jquery.min.js' %}"></script>
    <script src="{% static 'vendors/js/bootstrap.min.js' %}"></script>
</body>
</html>
